// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sample_caht.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sample.Chat {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class RouteGuide
  {
    static readonly string __ServiceName = "sample.chat.RouteGuide";

    static readonly grpc::Marshaller<global::Sample.Chat.Name> __Marshaller_sample_chat_Name = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sample.Chat.Name.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sample.Chat.Replay> __Marshaller_sample_chat_Replay = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sample.Chat.Replay.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sample.Chat.Empty> __Marshaller_sample_chat_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sample.Chat.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sample.Chat.Summary> __Marshaller_sample_chat_Summary = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sample.Chat.Summary.Parser.ParseFrom);

    static readonly grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Replay> __Method_Hello = new grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Replay>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hello",
        __Marshaller_sample_chat_Name,
        __Marshaller_sample_chat_Replay);

    static readonly grpc::Method<global::Sample.Chat.Empty, global::Sample.Chat.Replay> __Method_ListGreet = new grpc::Method<global::Sample.Chat.Empty, global::Sample.Chat.Replay>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListGreet",
        __Marshaller_sample_chat_Empty,
        __Marshaller_sample_chat_Replay);

    static readonly grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Summary> __Method_RecordGreet = new grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Summary>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "RecordGreet",
        __Marshaller_sample_chat_Name,
        __Marshaller_sample_chat_Summary);

    static readonly grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Replay> __Method_Chatting = new grpc::Method<global::Sample.Chat.Name, global::Sample.Chat.Replay>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Chatting",
        __Marshaller_sample_chat_Name,
        __Marshaller_sample_chat_Replay);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sample.Chat.SampleCahtReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RouteGuide</summary>
    [grpc::BindServiceMethod(typeof(RouteGuide), "BindService")]
    public abstract partial class RouteGuideBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Sample.Chat.Replay> Hello(global::Sample.Chat.Name request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListGreet(global::Sample.Chat.Empty request, grpc::IServerStreamWriter<global::Sample.Chat.Replay> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Sample.Chat.Summary> RecordGreet(grpc::IAsyncStreamReader<global::Sample.Chat.Name> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Chatting(grpc::IAsyncStreamReader<global::Sample.Chat.Name> requestStream, grpc::IServerStreamWriter<global::Sample.Chat.Replay> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RouteGuide</summary>
    public partial class RouteGuideClient : grpc::ClientBase<RouteGuideClient>
    {
      /// <summary>Creates a new client for RouteGuide</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RouteGuideClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RouteGuide that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RouteGuideClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RouteGuideClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RouteGuideClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Sample.Chat.Replay Hello(global::Sample.Chat.Name request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Hello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Sample.Chat.Replay Hello(global::Sample.Chat.Name request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Sample.Chat.Replay> HelloAsync(global::Sample.Chat.Name request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Sample.Chat.Replay> HelloAsync(global::Sample.Chat.Name request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sample.Chat.Replay> ListGreet(global::Sample.Chat.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGreet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Sample.Chat.Replay> ListGreet(global::Sample.Chat.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListGreet, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sample.Chat.Name, global::Sample.Chat.Summary> RecordGreet(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordGreet(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Sample.Chat.Name, global::Sample.Chat.Summary> RecordGreet(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_RecordGreet, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Sample.Chat.Name, global::Sample.Chat.Replay> Chatting(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Chatting(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Sample.Chat.Name, global::Sample.Chat.Replay> Chatting(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Chatting, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RouteGuideClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RouteGuideClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RouteGuideBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Hello, serviceImpl.Hello)
          .AddMethod(__Method_ListGreet, serviceImpl.ListGreet)
          .AddMethod(__Method_RecordGreet, serviceImpl.RecordGreet)
          .AddMethod(__Method_Chatting, serviceImpl.Chatting).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RouteGuideBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Hello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Sample.Chat.Name, global::Sample.Chat.Replay>(serviceImpl.Hello));
      serviceBinder.AddMethod(__Method_ListGreet, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Sample.Chat.Empty, global::Sample.Chat.Replay>(serviceImpl.ListGreet));
      serviceBinder.AddMethod(__Method_RecordGreet, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Sample.Chat.Name, global::Sample.Chat.Summary>(serviceImpl.RecordGreet));
      serviceBinder.AddMethod(__Method_Chatting, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Sample.Chat.Name, global::Sample.Chat.Replay>(serviceImpl.Chatting));
    }

  }
}
#endregion
